<svg
    xmlns="http://www.w3.org/2000/svg" width="650" height="250" preserveAspectRatio="xMinYMin meet" viewBox="0 0 650 250" onload="onSvgLoad()">
    <style type="text/css">
<![CDATA[
.bg {
  fill: black;
}
text {
  text-anchor: middle;
  dominant-baseline: middle;
}
.hour_day_text {
  fill: white;
  font-size: 13px;
}
.title_text {
  fill: white;
  font-size: 20px;
}
]]>
    </style>

    <script type="text/ecmascript">
<![CDATA[

var textMap = new Map([
  [
    "mon_text", {
      "中文": "周一",
      "EN": "Mon"
    }
  ], [
    "tue_text", {
      "中文": "周二",
      "EN": "Tue"
    }
  ], [
    "wed_text", {
      "中文": "周三",
      "EN": "Wed"
    }
  ], [
    "thu_text", {
      "中文": "周四",
      "EN": "Thu"
    }
  ], [
    "fri_text", {
      "中文": "周五",
      "EN": "Fri"
    }
  ], [
    "sat_text", {
      "中文": "周六",
      "EN": "Sat"
    }
  ], [
    "sun_text", {
      "中文": "周日",
      "EN": "Sun"
    }
  ], [
    "title_text", {
      "中文": "工作时间分布图",
      "EN": "Working Hour Distribution"
    }
  ], [
    "UTC+0_text", {
      "中文": "协调世界时 UTC",
      "EN": "UTC"
    }
  ], [
    "UTC+8_text", {
      "中文": "北京时间 UTC+8",
      "EN": "UTC+8"
    }
  ], [
    "UTC-5_text", {
      "中文": "美东时间 UTC-5",
      "EN": "UTC-5"
    }
  ]
]);

function changeLang(btn) {
  var lang = btn.innerHTML;

  var textElementList = document.getElementsByTagName("text");
  for (var i = 0; i < textElementList.length; i++) {
    var elem = textElementList[i];
    if (!elem.id) continue;
    var text = textMap.get(elem.id);
    if (text && text[lang]) {
      elem.innerHTML = text[lang];
    }
  }

  textElementList = document.getElementsByTagName("p");
  for (var i = 0; i < textElementList.length; i++) {
    var elem = textElementList[i];
    if (!elem.id) continue;
    var text = textMap.get(elem.id);
    if (text && text[lang]) {
      elem.innerHTML = text[lang];
    }
  }

  var btns = document.getElementsByName("lang_btn");
  for (var b of btns) {
    b.style.fill = "darkgrey";
  }
  btn.style.fill = "white";
}

function onLangBtnClick(evt) {
  changeLang(evt.target);
}

function getQueryVariable(variable) {
  var query = window.location.search.substring(1);
  if (!query) {
    return false;
  }
  var vars = query.split("&");
  for (var i = 0; i < vars.length; i++) {
    var pair = vars[i].split("=");
    if (pair[0] == variable) {
      return pair[1];
    }
  }
  return false;
}

// var hourColor = ['#bccc92', '#8ab04c', '#8ab04c', '#b5aa4e', '#a68341', '#9f6237', '#9e427e', '#9a462a', '#9f402b', '#983427'];
var hourColor = ['#B9FB69', '#CEFB6A', '#E6FC6C', '#FEFD6D', '#F9E067', '#F5C361', '#F1A85C', '#EE8C58', '#EC7255', '#EB5953'];
var dayId = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];

function renderElements(data, disp_TZs) {
  var width = 24;
  var hight = 24;
  var startX = 122;
  var startY = 0;
  var svg = document.getElementsByTagName("svg")[0];
  var maxHour = 24;
  var maxDay = 7;
  var radius = 22;
  var length = maxHour * maxDay;
  startY += disp_TZs.length * radius;
  if (!data) {
    data = [];
    for (var i = 0; i < length; i++) {
      data.push(Math.ceil(Math.random() * 10));
    }
  } else if (data.length < length) {
    var injectLen = length - data.length;
    for (var i = 0; i < injectLen; i++) {
      data.push(Math.ceil(Math.random() * 10));
    }
  }

  // render title
  var e = document.createElementNS("http://www.w3.org/2000/svg", "text");
  e.setAttribute('x', 300);
  e.setAttribute('y', 20);
  e.setAttribute('class', 'title_text');
  e.setAttribute('id', 'title_text');
  svg.appendChild(e);

  // render hour
  for (var hour = 0; hour < maxHour; hour++) {
    var e = document.createElementNS("http://www.w3.org/2000/svg", "text");
    e.innerHTML = hour.toString();
    e.setAttribute('x', startX + hour * radius + radius / 2);
    e.setAttribute('y', startY - 10);
    e.setAttribute('class', 'hour_day_text');
    // svg.appendChild(e);
  }

  // render day
  for (var day = 0; day < maxDay; day++) {
    var e = document.createElementNS("http://www.w3.org/2000/svg", "text");
    e.innerHTML = dayId[day];
    e.setAttribute('x', startX - 56);
    e.setAttribute('y', startY + day * radius + radius / 2);
    e.setAttribute('class', 'hour_day_text');
    e.setAttribute('id', dayId[day] + '_text');
    svg.appendChild(e);
  }

  for (var hour = 0; hour < maxHour; hour++) {
    for (var day = 0; day < maxDay; day++) {
      var x = startX + hour * radius + radius / 2;
      var y = startY + day * radius + radius / 2;
      var index = day * maxHour + hour;
      var e = document.createElementNS("http://www.w3.org/2000/svg", "circle");
      e.setAttribute('cx', x);
      e.setAttribute('cy', y);
      e.setAttribute('r', data[index]);
      e.setAttribute('fill', hourColor[Math.max(data[index] - 1, 0)]);
      svg.appendChild(e);
    }
  }

  // render TZs
  if(disp_TZs != undefined) {
	    for (var i = 0; i < disp_TZs.length; i++) {
		  var disp_TZ = disp_TZs[i];
		  var disp_TZ_str = ("+" + disp_TZ.toString()).replace("+-", "-");
		  var disp_TZ_head = 'UTC' + disp_TZ_str;
		  disp_TZ_str = disp_TZ_head;
		  var x = startX - 56;
		  // var y = startY + (maxDay+i) * radius + radius / 2;
		  var y = startY + (-disp_TZs.length+i) * radius + radius / 2;
		  var e = document.createElementNS("http://www.w3.org/2000/svg", "text");
		  e.innerHTML = disp_TZ_str;
		  e.setAttribute('x', x);
		  e.setAttribute('y', y);
		  e.setAttribute('class', 'hour_day_text');
		  e.setAttribute('id', disp_TZ_head + '_text');
		  svg.appendChild(e);
		  for (var hour = 0; hour < maxHour; hour++) {
			var e = document.createElementNS("http://www.w3.org/2000/svg", "text");
			var hour_TZ = hour + disp_TZ;
			if (hour_TZ >= 24){
			  hour_TZ %= 24;
			}
			else if (hour_TZ < 0) {
			  hour_TZ %= 24;
			  hour_TZ += 24;
			  hour_TZ %= 24;
			}
			e.innerHTML = hour_TZ.toString();
			e.setAttribute('x', startX + hour * radius + radius / 2);
			e.setAttribute('y', y);
			e.setAttribute('class', 'hour_day_text');
			svg.appendChild(e);
		  }
		}
  }
}

function onSvgLoad() {
  var data = getQueryVariable("data");
  if (data != false) {
    try {
      data = JSON.parse(data);
    } catch {
      try {
        data = decodeURI(data);
        data = JSON.parse(data);
      } catch {
        data = undefined;
      }
    }
  } else {
    data = undefined;
  }
  var disp_TZs = getQueryVariable("disp_TZs");
  if (disp_TZs != false) {
    try {
      disp_TZs = JSON.parse(disp_TZs);
    } catch {
      try {
        disp_TZs = decodeURI(disp_TZs);
        disp_TZs = JSON.parse(disp_TZs);
      } catch {
        disp_TZs = undefined;
      }
    }
  } else {
    disp_TZs = undefined;
  }
  renderElements(data, disp_TZs);
  var lang = getQueryVariable("lang");
  var hide_title = getQueryVariable("hide_title");
  var hide_lang_btn = getQueryVariable("hide_lang_btn");
  var langBtn = document.getElementById("en_btn_text");
  if (lang && (lang == "zh" || lang == "zh-cn")) {
    langBtn = document.getElementById("zh_btn_text");
  }
  changeLang(langBtn);
  if (hide_title == "true") {
	  var e_title_text = document.getElementById("title_text");
	  e_title_text.parentNode.removeChild(e_title_text);
  }
  if (hide_lang_btn == "true") {
	  var langBtns = document.getElementsByName("lang_btn");
	  for (var i = langBtns.length - 1; i >= 0; i--) {
		langBtns[i].parentNode.removeChild(langBtns[i]);
	  }
  }
  var color = getQueryVariable("bg_color");
  if (color) {
    document.getElementById("bg").style.fill = color;
  }
}

function show(evt, id) {
  var elem = document.getElementById(id);
  if (!elem) return;
  elem.style.visibility = "visible";
}

function hide(evt, id) {
  var elem = document.getElementById(id);
  if (!elem) return;
  elem.style.visibility = "hidden";
}

]]>
    </script>
    
    <rect id="bg" class="bg" x="0" y ="0" width="650" height="250"/>

    <text name="lang_btn" id="en_btn_text" x="280" y="240" onclick="onLangBtnClick(evt)">EN</text>
    <text name="lang_btn" id="zh_btn_text" x="320" y="240" onclick="onLangBtnClick(evt)">中文</text>

</svg>
